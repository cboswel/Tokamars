#define DEADSPOT 10                                    //range around neutral point to count as the neutral point, so imperfectly callibrated joysticks dont cause the Rover to move
#define NEUTRALPOINT 50                               // Value returned from the receiver when the stick is in the neutral position

/*************************************
IN1 IN2 PWM STBY OUT1 OUT2 Mode
H   H   H/L H    L    L    Short brake
L   H   H   H    L    H    CCW
L   H   L   H    L    L    Short brake
H   L   H   H    H    L    CW
H   L   L   H    L    L    Short brake
L   L   H   H    OFF       Stop
H/L H/L H/L L    OFF       Standby
**************************************/


// Front Left
int FR_PWM = 3;
int FR_IN1 = 4;
int FR_IN2 = 2;

// Front Right
int FL_PWM = 5;
int FL_IN1 = 7;
int FL_IN2 = 8;

void setup() {
  // put your setup code here, to run once:
  pinMode(FR_PWM, OUTPUT);
  pinMode(FR_IN1, OUTPUT);
  pinMode(FR_IN2, OUTPUT);
 
  pinMode(FL_PWM, OUTPUT);
  pinMode(FL_IN1, OUTPUT);
  pinMode(FL_IN2, OUTPUT);

  pinMode(BR_PWM, OUTPUT);
  pinMode(BR_IN1, OUTPUT);
  pinMode(BR_IN2, OUTPUT);

  pinMode(BL_PWM, OUTPUT);
  pinMode(BL_IN1, OUTPUT);
  pinMode(BL_IN2, OUTPUT);
}


int move(int y, int x) {
// function to set motors according to joystick state


// if both sticks are within the DEADSPOT (the neutral position in the centre):
  if (NEUTRALPOINT - (DEADSPOT / 2) <= y && y <= NEUTRALPOINT + (DEADSPOT / 2) && (NEUTRALPOINT - (DEADSPOT / 2) <= x && x <= NEUTRALPOINT + (DEADSPOT / 2))) {

// both motors stop.
      digitalWrite(FR_IN1, HIGH);
      digitalWrite(FR_IN2, HIGH);
      analogWrite(FR_PWM, 0);

      digitalWrite(FL_IN1, HIGH);
      digitalWrite(FL_IN2, HIGH);
      analogWrite(FL_PWM, 0);

      digitalWrite(BR_IN1, HIGH);
      digitalWrite(BR_IN2, HIGH);
      analogWrite(BR_PWM, 0);

      digitalWrite(BL_IN1, HIGH);
      digitalWrite(BL_IN2, HIGH);
      analogWrite(BL_PWM, 0);

      return 0;
  }
  

// if left stick is within DEADSPOT but right stick is turning left:
  if (NEUTRALPOINT - (DEADSPOT / 2) <= y && y <= NEUTRALPOINT + (DEADSPOT / 2) && x < NEUTRALPOINT - (DEADSPOT / 2)) {

// turn left on the spot: right goes forwards and left goes backwards, speed of x
      float position = (NEUTRALPOINT - x);
      int speed = (position * 255.0) / NEUTRALPOINT;
      digitalWrite(FR_IN1, HIGH);
      digitalWrite(FR_IN2, LOW);
      analogWrite(FR_PWM, speed);

      digitalWrite(FL_IN1, LOW);
      digitalWrite(FL_IN2, HIGH);
      analogWrite(FL_PWM, speed); 

      digitalWrite(BR_IN1, HIGH);
      digitalWrite(BR_IN2, LOW);
      analogWrite(BR_PWM, speed);

      digitalWrite(BL_IN1, LOW);
      digitalWrite(BL_IN2, HIGH);
      analogWrite(BL_PWM, speed); 

      return 0;
  }


// if left stick is within DEADSPOT but right stick is turning right:
  if (NEUTRALPOINT - (DEADSPOT / 2) <= y && y <= NEUTRALPOINT + (DEADSPOT / 2) && (x > NEUTRALPOINT + (DEADSPOT / 2))) {
// turn right on the spot: left goes forwards and right goes backwards, speed of x
      float position = (x - NEUTRALPOINT);
      int speed = (position * 255.0) / NEUTRALPOINT;
      digitalWrite(FR_IN1, LOW);
      digitalWrite(FR_IN2, HIGH);
      analogWrite(FR_PWM, speed);

      digitalWrite(FL_IN1, HIGH);
      digitalWrite(FL_IN2, LOW);
      analogWrite(FL_PWM, speed);

      digitalWrite(BR_IN1, LOW);
      digitalWrite(BR_IN2, HIGH);
      analogWrite(BR_PWM, speed);

      digitalWrite(BL_IN1, HIGH);
      digitalWrite(BL_IN2, LOW);
      analogWrite(BL_PWM, speed);

      return 0;
  }


// if left stick is forwards and right stick is within DEADSPOT:
  if (y > NEUTRALPOINT + (DEADSPOT / 2) && (NEUTRALPOINT - (DEADSPOT / 2) <= x && x <= NEUTRALPOINT + (DEADSPOT / 2))) {
// Go dead straight with both motors
      float position = (y - NEUTRALPOINT);
      int speed = (position * 255.0) / NEUTRALPOINT;
      digitalWrite(FR_IN1, HIGH);
      digitalWrite(FR_IN2, LOW);
      analogWrite(FR_PWM, speed);

      digitalWrite(FL_IN1, HIGH);
      digitalWrite(FL_IN2, LOW);
      analogWrite(FL_PWM, speed);

      digitalWrite(BR_IN1, HIGH);
      digitalWrite(BR_IN2, LOW);
      analogWrite(BR_PWM, speed);

      digitalWrite(BL_IN1, HIGH);
      digitalWrite(BL_IN2, LOW);
      analogWrite(BL_PWM, speed);

      return 0;
  }
 

// if left stick is forwards and right stick is turning left:
  if (y > NEUTRALPOINT + (DEADSPOT / 2) && (x < NEUTRALPOINT - (DEADSPOT / 2))) {
// Go forwards, arcing left
// To arc left, right wheel goes at max speed and left wheel goes at a percentage of max speed depending on how hard the turn is 
      float position = (y - NEUTRALPOINT);
      int speed = (position * 255.0) / NEUTRALPOINT;
      float np = NEUTRALPOINT;
      float scalar = (x / np);

      digitalWrite(FR_IN1, HIGH);
      digitalWrite(FR_IN2, LOW);
      analogWrite(FR_PWM, speed);

      digitalWrite(BR_IN1, HIGH);
      digitalWrite(BR_IN2, LOW);
      analogWrite(BR_PWM, speed);

      speed = (speed * scalar);
      digitalWrite(FL_IN1, HIGH);
      digitalWrite(FL_IN2, LOW);
      analogWrite(FL_PWM, speed);

      digitalWrite(BL_IN1, HIGH);
      digitalWrite(BL_IN2, LOW);
      analogWrite(BL_PWM, speed);

      return 0;
  }


// if left stick is forwards and right stick is turning right:
  if (y > (NEUTRALPOINT + (DEADSPOT / 2)) && NEUTRALPOINT - (x > NEUTRALPOINT + (DEADSPOT / 2))) {
// Go forwards, arcing right
// To arc right, left wheel goes at max speed and right wheel goes at a percentage of max speed depending on how hard the turn is 
      float position = (y - NEUTRALPOINT);
      int speed = (position * 255.0) / NEUTRALPOINT;
      float np = NEUTRALPOINT;
      float scalar = (1 - ((x - np) / np));
      speed = (speed * scalar);

      digitalWrite(FR_IN1, HIGH);
      digitalWrite(FR_IN2, LOW);
      analogWrite(FR_PWM, speed);
     
      digitalWrite(BR_IN1, HIGH);
      digitalWrite(BR_IN2, LOW);
      analogWrite(BR_PWM, speed);

      speed = (position * 255.0) / NEUTRALPOINT;
      digitalWrite(FL_IN1, HIGH);
      digitalWrite(FL_IN2, LOW);
      analogWrite(FL_PWM, speed);
      
      digitalWrite(BL_IN1, HIGH);
      digitalWrite(BL_IN2, LOW);
      analogWrite(BL_PWM, speed);

      return 0;
  }


// if left stick is reverse and right stick is within DEADSPOT:
  if (y < NEUTRALPOINT - (DEADSPOT / 2) && (NEUTRALPOINT - (DEADSPOT / 2) <= x && x <= NEUTRALPOINT + (DEADSPOT / 2))) {
// Reverse dead straight with both motors
      float position = (NEUTRALPOINT - y);
      int speed = (position * 255.0) / NEUTRALPOINT;
      digitalWrite(FR_IN1, LOW);
      digitalWrite(FR_IN2, HIGH);
      analogWrite(FR_PWM, speed);

      digitalWrite(FL_IN1, LOW);
      digitalWrite(FL_IN2, HIGH);
      analogWrite(FL_PWM, speed);

      digitalWrite(BR_IN1, LOW);
      digitalWrite(BR_IN2, HIGH);
      analogWrite(BR_PWM, speed);

      digitalWrite(BL_IN1, LOW);
      digitalWrite(BL_IN2, HIGH);
      analogWrite(BL_PWM, speed);

      return 0;
  }


// if left stick is reverse and right stick is turning left:
  if (y < (NEUTRALPOINT - (DEADSPOT / 2)) && x < (NEUTRALPOINT - (DEADSPOT / 2))) {
// Reverse while arcing left
// To arc left, right wheel goes at max speed and left wheel goes at a percentage of max speed depending on how hard the turn is 
      float position = (NEUTRALPOINT - y);
      int speed = (position * 255.0) / NEUTRALPOINT;
      float np = NEUTRALPOINT;
      float scalar = (x / np);

      digitalWrite(FR_IN1, LOW);
      digitalWrite(FR_IN2, HIGH);
      analogWrite(FR_PWM, speed);

      digitalWrite(BR_IN1, LOW);
      digitalWrite(BR_IN2, HIGH);
      analogWrite(BR_PWM, speed);

      speed = (speed * scalar);
      digitalWrite(FL_IN1, LOW);
      digitalWrite(FL_IN2, HIGH);
      analogWrite(FL_PWM, speed);

      digitalWrite(BL_IN1, LOW);
      digitalWrite(BL_IN2, HIGH);
      analogWrite(BL_PWM, speed);

      return 0;
  }


// if left stick is reverse and right stick is turning right:
  if (y < (NEUTRALPOINT - (DEADSPOT / 2)) && x > (NEUTRALPOINT + (DEADSPOT / 2))) {
// Reverse while arcing right
// To arc right, left wheel goes at max speed and right wheel goes at a percentage of max speed depending on how hard the turn is 
      float position = (NEUTRALPOINT - y);
      int speed = (position * 255.0) / NEUTRALPOINT;
      float np = NEUTRALPOINT;
      float scalar = (1 - ((x - np) / np));
      speed = (speed * scalar);

      digitalWrite(FR_IN1, LOW);
      digitalWrite(FR_IN2, HIGH);
      analogWrite(FR_PWM, speed);

      digitalWrite(BR_IN1, LOW);
      digitalWrite(BR_IN2, HIGH);
      analogWrite(BR_PWM, speed);

      speed = (position * 255.0) / NEUTRALPOINT;
      digitalWrite(FL_IN1, LOW);
      digitalWrite(FL_IN2, HIGH);
      analogWrite(FL_PWM, speed);

      digitalWrite(BL_IN1, LOW);
      digitalWrite(BL_IN2, HIGH);
      analogWrite(BL_PWM, speed);

      return 0;
  }
}



void loop() {
  // put your main code here, to run repeatedly:

// *** insert function to calculate x and y values from receiver signals here***  
  move(255, 255);
}
